import cv2
import numpy as np
import ffmpeg

# Paths to YOLO files
yolo_weights = "yolov3.weights" # Path to YOLO weights file
yolo_cfg = "yolov3.cfg" # Path to YOLO configuration file
coco_names = "coco.names" # Path to COCO labels file

# Load YOLO model
net = cv2.dnn.readNet(yolo_weights, yolo_cfg)

# Load the COCO object classes
with open(coco_names, 'r') as f:
    classes = f.read().strip().split('\n')

# Get the output layer names of the YOLO model
layer_names = net.getLayerNames()
output_layers = [layer_names[i[0] - 1] for i in net.getUnconnectedOutLayers()]

# Initialize video capture
video_path = "input_video.mp4"
cap = cv2.VideoCapture(video_path)

# Get video properties
fps = cap.get(cv2.CAP_PROP_FPS)
frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

# Define output resolution for vertical format (9:16)
output_width = 1080
output_height = 1920

# Video writer for saving the output
out = cv2.VideoWriter('output_video.mp4',
                      cv2.VideoWriter_fourcc(*'mp4v'),
                      fps, (output_width, output_height))

# Function to perform object detection using YOLO
def detect_objects(frame):
    height, width = frame.shape[:2]
    blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
    net.setInput(blob)
    outputs = net.forward(output_layers)
    
    boxes = []
    confidences = []
    class_ids = []

    for output in outputs:
        for detection in output:
            for obj in detection:
                scores = obj[5:]
                class_id = np.argmax(scores)
                confidence = scores[class_id]
                if confidence > 0.5: # Threshold for confidence
                    center_x = int(obj[0] * width)
                    center_y = int(obj[1] * height)
                    w = int(obj[2] * width)
                    h = int(obj[3] * height)
                    
                    x = int(center_x - w / 2)
                    y = int(center_y - h / 2)
                    
                    boxes.append([x, y, w, h])
                    confidences.append(float(confidence))
                    class_ids.append(class_id)

    indices = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4) # Non-maximum suppression to remove duplicates
    filtered_boxes = []
    if len(indices) > 0:
        for i in indices.flatten():
            filtered_boxes.append(boxes[i])

    return filtered_boxes, class_ids

# Function to crop video to vertical format (9:16) based on object positions
def crop_to_vertical(frame, boxes):
    if len(boxes) == 0:
        return cv2.resize(frame, (output_width, output_height)) # Default center crop
    
    # Calculate the central area that contains the majority of objects
    avg_center_x = np.mean([box[0] + box[2] // 2 for box in boxes])
    
    # Define the cropping area around the center for vertical video
    new_x = max(0, int(avg_center_x) - output_width // 2)
    new_x = min(new_x, frame_width - output_width)

    # Crop the frame to the vertical format (9:16)
    cropped_frame = frame[0:frame_height, new_x:new_x + output_width]
    return cv2.resize(cropped_frame, (output_width, output_height))

# Process each frame
while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Perform object detection on the current frame
    boxes, class_ids = detect_objects(frame)

    # Crop to vertical format based on detected objects' positions
    vertical_frame = crop_to_vertical(frame, boxes)

    # Draw bounding boxes (optional, for visualizing detection)
    for box in boxes:
        x, y, w, h = box
        cv2.rectangle(vertical_frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

    # Write the frame to the output video
    out.write(vertical_frame)

    # Optionally show the frame in real-time
    cv2.imshow('Vertical Video', vertical_frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
cap.release()
out.release()
cv2.destroyAllWindows()

# Use FFmpeg to ensure proper encoding (optional step, for better quality)
ffmpeg.input('output_video.mp4').output('final_output_video.mp4').run()
